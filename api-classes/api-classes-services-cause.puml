@startuml
package api {
  class CauseController {
    + ResponseListDTO<CauseDTO> getAll(EntityCondition filter,\nSortFields sort, LimitOffset limit, String registry, Long statusStage)
    + CauseDTO getOne(Long id)
    + CauseDTO create(Long id)
    + CauseDTO update(Long id, CauseDTO dto)
    + void remove(Long id)
  }

  class CauseService {
    + ResponseListDTO<CauseEntity> getServices(EntityCondition filter,\nSortFields sort, LimitOffset limit, String registry, Long statusStage)
    + CauseEntity getOne(Long id)
    + CauseEntity create(Long id)
    + CauseEntity update(Long id, CauseEntity dto)
    + void remove(Long id)
  }

  class CauseRepository {
    + Class<CauseEntity> getEntityClass()
  }

  class ServiceService {
  }
}

class infrastructure.DynamicMapper {
  + TView toDto(TEntity entity)
  + TEntity toEntity(TView entity)
  + TEntity toEntity(TEntity entity, TView entity)
}

class dto.CauseDTO {
- Long id
- String nameShort
- String nameFull
- LocalDate activeFrom
- LocalDate activeTo
- Long serviceId
}

package db {
  class CauseEntity {
  - String nameShort
  - String nameFull
  - boolean active
  - LocalDate activeFrom
  - LocalDate activeTo
  - ServiceEntity service
  }

  class ServiceEntity {

  }

  ServiceEntity "1" *-- "*" CauseEntity
}
CauseController --> CauseDTO
CauseController --> CauseService
CauseController --> DynamicMapper

CauseService --> CauseRepository
CauseService --> CauseEntity
CauseService --> ServiceService

CauseRepository --> CauseEntity

DynamicMapper --> CauseEntity

'interface repositories.AbstractRepository {
'}
'
'CauseRepository --|> AbstractRepository
@enduml