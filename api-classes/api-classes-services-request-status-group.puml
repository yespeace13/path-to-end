@startuml
package api {
  class StatusGroupController {
    + ResponseListDTO<StatusGroupDTO> getAll(EntityCondition filter,\nSortFields sort, LimitOffset limit)
    + StatusGroupDTO getOne(Long id)
    + StatusGroupDTO create(StatusGroupDTO)
    + StatusGroupDTO update(Long id, StatusGroupDTO dto)
    + void remove(Long id)
  }

  class StatusGroupService {
    + ResponseListDTO<StatusGroupDTO> getAll(EntityCondition filter,\nSortFields sort, LimitOffset limit)
    + StatusGroupDTO getOne(Long id)
    + StatusGroupDTO create(StatusGroupDTO)
    + StatusGroupDTO update(Long id, StatusGroupDTO dto)
    + void remove(Long id)
  }

  class StatusGroupRepository {
    + Class<StatusGroupEntity> getEntityClass()
  }
}

class infrastructure.DynamicMapper {
  + TView toDto(TEntity entity)
  + TEntity toEntity(TView entity)
  + TEntity toEntity(TEntity entity, TView entity)
}
package dto {
  class StatusGroupDTO {
   - Long id
   - String name
   - Integer restrictions
   - Integer creatorPermissions
   - Long stageId
   }

'   class StatusDTO {
'   }

'   StatusGroupDTO --* StatusDTO
}

package db {

  class StatusGroupEntity {
  - String name
  - String description
'  - List<StatusPathEntity> statusPaths
'  - StatusEntity defaultStatus
  }


'  StatusGroupEntity --> StatusEntity
'  RequestEntity --> StatusGroupEntity

}


StatusGroupController --> StatusGroupDTO
StatusGroupController --> StatusGroupService
StatusGroupController --> DynamicMapper

StatusGroupService --> StatusGroupDTO
StatusGroupService --> StatusGroupRepository
StatusGroupService --> StatusGroupEntity

StatusGroupRepository --> StatusGroupEntity

DynamicMapper --> StatusGroupEntity
DynamicMapper --> StatusGroupDTO

@enduml